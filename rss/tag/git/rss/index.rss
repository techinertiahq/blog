<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="//purl.org/dc/elements/1.1/" xmlns:content="//purl.org/rss/1.0/modules/content/" xmlns:atom="//www.w3.org/2005/Atom" version="2.0" xmlns:media="//search.yahoo.com/mrss/"><channel><title><![CDATA[git - Tech Inertia ]]></title><description><![CDATA[Technology & Startup]]></description><link>https://techinertia.com/</link><image><url>https://techinertia.com/favicon.png</url><title>git - Tech Inertia </title><link>https://techinertia.com/</link></image><generator>Ghost 3.8</generator><lastBuildDate>Sun, 03 Jan 2021 08:44:21 GMT</lastBuildDate><atom:link href="https://techinertia.com/tag/git/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[What No One Tells You About Git Branching]]></title><description><![CDATA[The power of git comes from the ease of branching and merging the code base allowing for flexibility in development. Although a lot of teams fail to create and follow a branching model which best suits the style of team. Find out how you can master git branching.]]></description><link>https://techinertia.com/git-branching/</link><guid isPermaLink="false">5c713c98cc021c1cf271f1a9</guid><category><![CDATA[git]]></category><category><![CDATA[version-control]]></category><dc:creator><![CDATA[Nilesh Bhosale]]></dc:creator><pubDate>Mon, 11 Mar 2019 01:05:00 GMT</pubDate><media:content url="//res-3.cloudinary.com/techinertia-com/image/upload/q_auto/v1/techinertia/2019/04/pexels-photo-1120344.jpg" medium="image"/><content:encoded><![CDATA[<h2 id="using-git-like-a-pro">Using Git like a pro</h2><img src="//res-3.cloudinary.com/techinertia-com/image/upload/q_auto/v1/techinertia/2019/04/pexels-photo-1120344.jpg" alt="What No One Tells You About Git Branching"><p>Git is the most popular version control system used by all types of teams including members from 2 to 10,000+. The power of git comes from the ease of branching and merging the code base allowing for flexibility in development. Although a lot of teams fail to create and follow a branching model which best suits the style of team. </p><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="//res-1.cloudinary.com/techinertia-com/image/upload/q_auto/v1/techinertia/2019/04/Git-Survey---Github-2018_o.png" class="kg-image" alt="What No One Tells You About Git Branching"><figcaption><a href="https://insights.stackoverflow.com/survey/2018">A survey from Stack Overflow Insights - 2018</a></figcaption></figure><p>Each team is unique and has to take the time to iterate over which branching model suits them the best. In most cases a single model does not completely fit a teams dynamics, teams will then need to combine certain models and device standards to cater to business-specific needs. </p><p>Choosing the right branching model for your team is a crucial decision directly affecting the developer time in collaborating and not developing new code. A suitable model will save several hours or even days and a wrong choice of model will waste valuable developer time in merging code for several hours. </p><h2 id="few-branching-models">Few Branching Models </h2><ul><li>Long Running Branches</li></ul><figure class="kg-card kg-image-card kg-width-wide"><img src="//res-1.cloudinary.com/techinertia-com/image/upload/q_auto/v1/techinertia/2019/04/longrunningbranches-5.jpg" class="kg-image" alt="What No One Tells You About Git Branching"></figure><ul><li>Feature Branches</li></ul><figure class="kg-card kg-image-card kg-width-wide"><img src="//res-5.cloudinary.com/techinertia-com/image/upload/q_auto/v1/techinertia/2019/04/featurebranches-1.jpg" class="kg-image" alt="What No One Tells You About Git Branching"></figure><ul><li>Gitflow</li></ul><figure class="kg-card kg-image-card kg-width-wide"><img src="//res-4.cloudinary.com/techinertia-com/image/upload/q_auto/v1/techinertia/2019/04/gitflow-1.jpg" class="kg-image" alt="What No One Tells You About Git Branching"></figure><ul><li>Environment Branches</li></ul><figure class="kg-card kg-image-card kg-width-wide"><img src="//res-4.cloudinary.com/techinertia-com/image/upload/q_auto/v1/techinertia/2019/04/environmentbranches.jpg" class="kg-image" alt="What No One Tells You About Git Branching"></figure><!--kg-card-begin: markdown--><p>And many more  :</p>
<ul>
<li><a href="https://git-scm.com/book/en/v2/Git-Branching-Branching-Workflows">https://git-scm.com/book/en/v2/Git-Branching-Branching-Workflows</a></li>
<li><a href="https://www.toptal.com/git/git-workflows-for-pros-a-good-git-guide">https://www.toptal.com/git/git-workflows-for-pros-a-good-git-guide</a></li>
<li><a href="https://buddy.works/blog/5-types-of-git-workflows">https://buddy.works/blog/5-types-of-git-workflows</a></li>
</ul>
<!--kg-card-end: markdown--><h2 id="how-to-choose-the-right-branching-model">How to choose the right branching model</h2><p>To decide which models work best for you consider the following pointers and make a decision based on them:</p><!--kg-card-begin: markdown--><ul>
<li>Developer Proficiency</li>
<li>Environments - Dev, Staging, Beta, Production etc</li>
<li>How To Handle New Features</li>
<li>How To Handle Hot Fixes</li>
<li>How To Handle Deployments</li>
<li>Versions And Tags</li>
<li>Need For Branch Privacy</li>
<li>Need To Integrate CI CD</li>
<li>Branch Naming Strategy</li>
<li>Commit Messages Information Requirement</li>
<li>Pull Request Hierarchy</li>
</ul>
<!--kg-card-end: markdown--><h2 id="where-to-start">Where to start</h2><p>When you are starting on a new project or shifting your codebase to git consider this guideline to shape your workflow.</p><!--kg-card-begin: markdown--><ol>
<li>develop branch is the latest branch</li>
<li>every new functionality needs to be done with a new feature branch</li>
<li>a simple feature branch naming scheme like featurename_date serves well for developers to work on.</li>
<li>commit message need to be sufficient understand what's included in the code. A very detailed commit message usually never get read in history.</li>
<li>keep the Readme file updated.</li>
<li>once a stable Dev code base is achieved developer can then push the code to staging.</li>
<li>staging level bugs need to be fixed with feature branches into Dev then staging.</li>
<li>after a few testing cycles, the stable staging code is pushed to production branch which could be master.</li>
<li>tag all production release with a version of the software for trackability</li>
<li>hot fixes from production can be handled based on criticality. Blocker issues could be fixed on production and then propagated down. Others need to follow the same cycle like a feature.</li>
<li>maintain environment specific properties in branches. Fresh checked out code should be directly deployable. This allows you to automate the deployment using CI cd.</li>
<li>If pull request control is a must for your team do at the staging level. Develop an environment should be handled by the developer for speed.</li>
</ol>
<!--kg-card-end: markdown--><figure class="kg-card kg-image-card"><img src="//res-3.cloudinary.com/techinertia-com/image/upload/q_auto/v1/techinertia/2019/04/wheretostart.jpg" class="kg-image" alt="What No One Tells You About Git Branching"></figure><h2 id="benefits">Benefits </h2><ul><li>Developer friendly as they are only concerned with develop, feature and hot fix branches.</li><li>Multiple features can be developed and tested in parallel.</li><li>Testers can tracks bugs by staging branch version.</li><li>Production code is tagged for easy history tracking.</li><li>CI and CD can be triggered by merge events in dev or staging reducing deployment efforts.</li></ul><h2 id="conclusion-">Conclusion:</h2><p>Git is a powerful tool to manage your codebase and combined with the right branching model and standards your team's can utilize its full potential.</p><p>Every team needs to undergo iterative cycles for enhancing and modifying the workflow according to what works best for developers and the business needs. </p><p>You can start your git branching strategy using the pointers mentioned above and customize as per your teams needs. </p><p>Interesting Read:</p><ul><li><a href="https://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model</a> - <a href="https://nvie.com/about/">Vincent Driessen</a></li></ul>]]></content:encoded></item></channel></rss>